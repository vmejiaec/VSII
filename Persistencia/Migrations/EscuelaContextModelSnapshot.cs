// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistencia;

namespace Persistencia.Migrations
{
    [DbContext(typeof(EscuelaContext))]
    partial class EscuelaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Modelo.Escuela.Calificacion", b =>
                {
                    b.Property<int>("CalificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Matricula_DetId")
                        .HasColumnType("integer");

                    b.Property<float>("Nota1")
                        .HasColumnType("real");

                    b.Property<float>("Nota2")
                        .HasColumnType("real");

                    b.Property<float>("Nota3")
                        .HasColumnType("real");

                    b.HasKey("CalificacionId");

                    b.HasIndex("Matricula_DetId")
                        .IsUnique();

                    b.ToTable("calificaciones");
                });

            modelBuilder.Entity("Modelo.Escuela.Carrera", b =>
                {
                    b.Property<int>("CarreraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float>("CostoCredito")
                        .HasColumnType("real");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("CarreraId");

                    b.ToTable("carreras");
                });

            modelBuilder.Entity("Modelo.Escuela.Configuracion", b =>
                {
                    b.Property<int>("ConfiguracionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreditosMaximo")
                        .HasColumnType("integer");

                    b.Property<string>("EscuelaNombre")
                        .HasColumnType("text");

                    b.Property<float>("NotaMinima")
                        .HasColumnType("real");

                    b.Property<int>("PeriodoVigenteId")
                        .HasColumnType("integer");

                    b.Property<float>("PesoNota1")
                        .HasColumnType("real");

                    b.Property<float>("PesoNota2")
                        .HasColumnType("real");

                    b.Property<float>("PesoNota3")
                        .HasColumnType("real");

                    b.HasKey("ConfiguracionId");

                    b.HasIndex("PeriodoVigenteId");

                    b.ToTable("configuracion");
                });

            modelBuilder.Entity("Modelo.Escuela.Curso", b =>
                {
                    b.Property<int>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarreraId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Jornada")
                        .HasColumnType("text");

                    b.Property<int>("MateriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<int>("PeriodoId")
                        .HasColumnType("integer");

                    b.HasKey("CursoId");

                    b.HasIndex("CarreraId");

                    b.HasIndex("MateriaId");

                    b.HasIndex("PeriodoId");

                    b.ToTable("cursos");
                });

            modelBuilder.Entity("Modelo.Escuela.Estudiante", b =>
                {
                    b.Property<int>("EstudianteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("EstudianteId");

                    b.ToTable("estudiantes");
                });

            modelBuilder.Entity("Modelo.Escuela.Malla", b =>
                {
                    b.Property<int>("MallaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarreraId")
                        .HasColumnType("integer");

                    b.Property<int>("MateriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nivel")
                        .HasColumnType("text");

                    b.HasKey("MallaId");

                    b.HasIndex("CarreraId");

                    b.HasIndex("MateriaId")
                        .IsUnique();

                    b.ToTable("mallas");
                });

            modelBuilder.Entity("Modelo.Escuela.Materia", b =>
                {
                    b.Property<int>("MateriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<int>("Creditos")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.HasKey("MateriaId");

                    b.ToTable("materias");
                });

            modelBuilder.Entity("Modelo.Escuela.Matricula", b =>
                {
                    b.Property<int>("MatriculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarreraId")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<int>("EstudianteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PeriodoId")
                        .HasColumnType("integer");

                    b.HasKey("MatriculaId");

                    b.HasIndex("CarreraId");

                    b.HasIndex("EstudianteId");

                    b.HasIndex("PeriodoId");

                    b.ToTable("matriculas");
                });

            modelBuilder.Entity("Modelo.Escuela.Matricula_Det", b =>
                {
                    b.Property<int>("Matricula_DetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CursoId")
                        .HasColumnType("integer");

                    b.Property<int>("MatriculaId")
                        .HasColumnType("integer");

                    b.HasKey("Matricula_DetId");

                    b.HasIndex("CursoId");

                    b.HasIndex("MatriculaId");

                    b.ToTable("matriculas_Det");
                });

            modelBuilder.Entity("Modelo.Escuela.Periodo", b =>
                {
                    b.Property<int>("PeriodoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Estado")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PeriodoId");

                    b.ToTable("periodos");
                });

            modelBuilder.Entity("Modelo.Escuela.Prerequisito", b =>
                {
                    b.Property<int>("MallaId")
                        .HasColumnType("integer");

                    b.Property<int>("MateriaId")
                        .HasColumnType("integer");

                    b.HasKey("MallaId", "MateriaId");

                    b.HasIndex("MateriaId");

                    b.ToTable("prerequisitos");
                });

            modelBuilder.Entity("Modelo.Escuela.Calificacion", b =>
                {
                    b.HasOne("Modelo.Escuela.Matricula_Det", "Matricula_Det")
                        .WithOne("Calificacion")
                        .HasForeignKey("Modelo.Escuela.Calificacion", "Matricula_DetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matricula_Det");
                });

            modelBuilder.Entity("Modelo.Escuela.Configuracion", b =>
                {
                    b.HasOne("Modelo.Escuela.Periodo", "PeriodoVigente")
                        .WithMany()
                        .HasForeignKey("PeriodoVigenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeriodoVigente");
                });

            modelBuilder.Entity("Modelo.Escuela.Curso", b =>
                {
                    b.HasOne("Modelo.Escuela.Carrera", "Carrera")
                        .WithMany("Cursos")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Escuela.Materia", "Materia")
                        .WithMany("Cursos")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Escuela.Periodo", "Periodo")
                        .WithMany("Cursos")
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");

                    b.Navigation("Materia");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("Modelo.Escuela.Malla", b =>
                {
                    b.HasOne("Modelo.Escuela.Carrera", "Carrera")
                        .WithMany()
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Escuela.Materia", "Materia")
                        .WithOne("Malla")
                        .HasForeignKey("Modelo.Escuela.Malla", "MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("Modelo.Escuela.Matricula", b =>
                {
                    b.HasOne("Modelo.Escuela.Carrera", "Carrera")
                        .WithMany("Matriculas")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Escuela.Estudiante", "Estudiante")
                        .WithMany("Matriculas")
                        .HasForeignKey("EstudianteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Escuela.Periodo", "Periodo")
                        .WithMany("Matriculas")
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrera");

                    b.Navigation("Estudiante");

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("Modelo.Escuela.Matricula_Det", b =>
                {
                    b.HasOne("Modelo.Escuela.Curso", "Curso")
                        .WithMany("Matricula_Dets")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelo.Escuela.Matricula", "Matricula")
                        .WithMany("Matricula_Dets")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("Modelo.Escuela.Prerequisito", b =>
                {
                    b.HasOne("Modelo.Escuela.Malla", "Malla")
                        .WithMany("PreRequisitos")
                        .HasForeignKey("MallaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Modelo.Escuela.Materia", "Materia")
                        .WithMany("Prerequisitos")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Malla");

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("Modelo.Escuela.Carrera", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("Modelo.Escuela.Curso", b =>
                {
                    b.Navigation("Matricula_Dets");
                });

            modelBuilder.Entity("Modelo.Escuela.Estudiante", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("Modelo.Escuela.Malla", b =>
                {
                    b.Navigation("PreRequisitos");
                });

            modelBuilder.Entity("Modelo.Escuela.Materia", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Malla");

                    b.Navigation("Prerequisitos");
                });

            modelBuilder.Entity("Modelo.Escuela.Matricula", b =>
                {
                    b.Navigation("Matricula_Dets");
                });

            modelBuilder.Entity("Modelo.Escuela.Matricula_Det", b =>
                {
                    b.Navigation("Calificacion");
                });

            modelBuilder.Entity("Modelo.Escuela.Periodo", b =>
                {
                    b.Navigation("Cursos");

                    b.Navigation("Matriculas");
                });
#pragma warning restore 612, 618
        }
    }
}
